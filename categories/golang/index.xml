<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang - 分类 - Vespeng&#39;s Blog</title>
    <link>https://vespeng.com/categories/golang/</link>
    <description>不止于代码，更有沿途的风景与思考</description>
    <generator>Hugo 0.150.0 &amp; FixIt v0.4.0-alpha.1</generator>
    <language>zh-CN</language>
    <managingEditor>vespeng.liu@outlook.com (Vespeng)</managingEditor>
    <webMaster>vespeng.liu@outlook.com (Vespeng)</webMaster>
    <lastBuildDate>Mon, 15 Sep 2025 23:45:34 +0800</lastBuildDate>
    <atom:link href="https://vespeng.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法实现示例集：字符串</title>
      <link>https://vespeng.com/posts/algorithm_implementation_example_string/</link>
      <pubDate>Mon, 15 Sep 2025 23:45:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/algorithm_implementation_example_string/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <category domain="https://vespeng.com/categories/%E7%AE%97%E6%B3%95/">算法</category>
      <description>&lt;p&gt;字符串处理是工作中基础且常用的操作，无论是面试准备、日常开发还是学习巩固，掌握字符串处理的核心算法都是程序员必备技能。&lt;/p&gt;&#xA;&lt;p&gt;本文提供清晰、可运行的 Golang 核心代码实现，快速掌握字符串处理的核心算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>算法实现示例集：排序</title>
      <link>https://vespeng.com/posts/algorithm_implementation_example_sort/</link>
      <pubDate>Sat, 16 Aug 2025 22:30:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/algorithm_implementation_example_sort/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <category domain="https://vespeng.com/categories/%E7%AE%97%E6%B3%95/">算法</category>
      <description>&lt;p&gt;排序是算法世界中最基础也最常用的操作之一，无论是面试准备、日常开发还是学习巩固，清晰可靠的排序算法实现都是程序员工具箱里的必备品。&lt;/p&gt;&#xA;&lt;p&gt;本文不追求冗长的理论推导，而是聚焦于提供清晰、可运行的核心代码实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 项目实战：实现 JWT 认证中间件</title>
      <link>https://vespeng.com/posts/go_practice_implementing_jwt_auth_middleware/</link>
      <pubDate>Fri, 25 Jul 2025 21:15:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_practice_implementing_jwt_auth_middleware/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在构建安全可靠的 Go Web 服务时，JWT(JSON Web Token)认证是常用的解决方案。本文将介绍如何在 Gin 框架中实现完整的 JWT 认证方案，同时包含灵活的 Redis 集成选项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记一次 Golang 开发岗面试</title>
      <link>https://vespeng.com/posts/golang_development_job_interview/</link>
      <pubDate>Sat, 07 Jun 2025 14:20:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/golang_development_job_interview/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>如下题目于面试结束两周后，整理了当初未能回答上来的问题，在此分享总结，以供参考。</description>
    </item>
    <item>
      <title>Go-SJSON 组件，JSON 动态修改新方案</title>
      <link>https://vespeng.com/posts/go_sjson_component/</link>
      <pubDate>Sun, 09 Mar 2025 14:00:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_sjson_component/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在Go语言 json 处理领域，在 json 数据处理中，读取与修改是两个核心需求。前文介绍的 &lt;a href=&#34;https://vespeng.com/posts/go_gjson_component/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;&lt;code&gt;GJSON&lt;/code&gt;&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt; 解决了灵活读取问题，而 &lt;code&gt;SJSON&lt;/code&gt; 作为其姊妹库，则专注于实现无需结构体定义的 json 动态修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go-GJSON 组件，解锁 JSON 读取新姿势</title>
      <link>https://vespeng.com/posts/go_gjson_component/</link>
      <pubDate>Sun, 02 Mar 2025 17:00:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_gjson_component/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在 Go 语言开发领域，json 数据处理是极为常见的任务。Go 标准库提供了 &lt;code&gt;encoding/json&lt;/code&gt; 包用于处理 json 数据，同时第三方库 &lt;code&gt;GJSON&lt;/code&gt; &amp;amp; &lt;code&gt;SJSON&lt;/code&gt; 也在 json 处理方面表现出色。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 项目实战：全局异常处理</title>
      <link>https://vespeng.com/posts/go_practical_global_exception_handling/</link>
      <pubDate>Sun, 09 Feb 2025 17:10:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_practical_global_exception_handling/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在 Go 项目开发中，有效的异常处理是确保程序健壮性和稳定性的关键因素之一。全局异常处理机制能够统一处理项目中可能出现的各种异常情况，提高代码的可读性、可维护性以及错误处理的一致性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 项目实战：如何部署多环境开发</title>
      <link>https://vespeng.com/posts/go_practical_multi_environment_development/</link>
      <pubDate>Sat, 25 Jan 2025 17:00:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_practical_multi_environment_development/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在 Web 项目的开发过程中，能够在不同的环境（如开发、测试、生产）中进行灵活部署是至关重要的。不同环境通常需要不同的配置，如服务器端口、数据库连接信息、缓存设置等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 项目实战：如何优雅的处理日志</title>
      <link>https://vespeng.com/posts/go_practical_processing_log/</link>
      <pubDate>Wed, 22 Jan 2025 21:40:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_practical_processing_log/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在 Go 项目开发中，日志处理是一项至关重要的任务。它不仅有助于我们在开发过程中调试代码，还能在生产环境中帮助我们快速定位问题。本文将详细介绍如何在 Go 项目中优雅地处理日志，包括日志的级别、格式、输出以及如何使用第三方日志库等方面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 项目实战：搭建高效的 Gin Web 目录结构</title>
      <link>https://vespeng.com/posts/go_practical_gin_directory_structure/</link>
      <pubDate>Sun, 19 Jan 2025 21:30:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/go_practical_gin_directory_structure/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>Gin框架，作为Go语言生态中备受青睐的Web开发框架，凭借其卓越的性能、简洁的设计以及丰富的功能特性，在众多选项中脱颖而出。本文旨在深入剖析如何在使用Gin框架的过程中，构建一个既高效又便于管理的项目架构，助力开发者打造既快速响应又易于维护的Web应用程序。</description>
    </item>
    <item>
      <title>Json.Unmarshal 解析数值类型（踩坑）</title>
      <link>https://vespeng.com/posts/json_unmarshall_parsing_numeric_types/</link>
      <pubDate>Sun, 12 Jan 2025 19:00:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/json_unmarshall_parsing_numeric_types/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;首先我们先明确下 json 包下 Unmarshal() 函数是什么：&lt;/p&gt;&#xA;&lt;p&gt;它是 Go 语言标准库 &lt;code&gt;encoding/json&lt;/code&gt; 中的一个函数，用于将 JSON 数据解析为 Go 语言中的数据结构。它的作用是将一个 JSON 格式的字节切片（&lt;code&gt;[]byte&lt;/code&gt;）转换为对应的 Go 语言数据类型，如结构体、切片、映射等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 语言并发实战：利用协程处理多个接口数据</title>
      <link>https://vespeng.com/posts/collaborative_processing_of_multiple_interfaces/</link>
      <pubDate>Sun, 12 Jan 2025 18:30:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/collaborative_processing_of_multiple_interfaces/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;高效地处理多个数据源并将其整合为有意义的结果是开发中一项重要的任务。Go 语言，以其强大的并发特性，为我们提供了优雅而高效的解决方案。那么我们探讨一下如何利用 Go 语言的协程，同时调用多个接口获取数据，并将这些数据无缝地合并为一个完整的数据集。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 的并发优势</title>
      <link>https://vespeng.com/posts/the_concurrency_advantage_of_go/</link>
      <pubDate>Sun, 12 Jan 2025 18:00:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/the_concurrency_advantage_of_go/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;p&gt;在如今的编程领域，一个程序能够同时处理多个任务的能力非常重要，而 Golang 在并发编程方面表现十分出色，具有很多独特的优势。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang 开发环境搭建</title>
      <link>https://vespeng.com/posts/golang_development_environment/</link>
      <pubDate>Sun, 12 Jan 2025 14:30:00 +0800</pubDate><author>vespeng.liu@outlook.com (Vespeng)</author>
      <guid>https://vespeng.com/posts/golang_development_environment/</guid>
      <category domain="https://vespeng.com/categories/golang/">Golang</category>
      <description>&lt;h2 class=&#34;heading-element&#34; id=&#34;下载golang&#34;&gt;&lt;span&gt;下载Golang&lt;/span&gt;&#xA;  &lt;a href=&#34;#%e4%b8%8b%e8%bd%bdgolang&#34; class=&#34;heading-mark&#34;&gt;&#xA;    &lt;svg class=&#34;octicon octicon-link&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&lt;p&gt;官网链接：&lt;a href=&#34;https://golang.google.cn/dl/&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;https://golang.google.cn/dl/&lt;i class=&#34;fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
